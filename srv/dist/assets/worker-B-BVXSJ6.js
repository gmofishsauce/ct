(function(){"use strict";let e=null,d="";function o(s){postMessage({type:"debug",data:s})}function n(s){postMessage({type:"error",error:s,status:r(e)})}function r(s){return s?["connecting","ready","closing","down"][s.readyState]:"down"}onmessage=async s=>{const c=s.data;switch(c.type){case"open":o("open"),d=c.baseUrl||"";try{const a=await fetch(d+"/api/health");if(!a.ok){n("/api/health returned "+a.status);break}if(!(await a.json()).ok){n("/api/health response not ok");break}o("health check OK");const p=d.replace(/^http/,"ws")+"/ws/run";e=new WebSocket(p),o("web socket created"),e.onmessage=t=>{try{const i=JSON.parse(t.data),g=Object.assign({},i,{status:r(e)});postMessage(g)}catch{n("invalid JSON from server")}},e.onerror=t=>{n("WebSocket error: "+(t&&t.message?t.message:String(t)))},e.onclose=t=>{n("WebSocket closed: code "+(t.code||"unknown")+" reason "+(t.reason||""))}}catch(a){n(a.message)}break;case"stdin":if(e&&e.readyState===WebSocket.OPEN){let a=JSON.stringify({type:"stdin",data:c.data});o("sending to server: "+a),e.send(a)}else postMessage({type:"error",error:"not connected",status:r(e)});break;default:postMessage({type:"error",error:"Unknown message type",status:r(e)});break}}})();
