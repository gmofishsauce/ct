(function(){"use strict";let t=null,p="",a=1e3;const l=3e4;function n(e){postMessage({type:"debug",data:e})}function o(e){postMessage({type:"error",error:e,status:r(t)})}function r(e){return e?["connecting","ready","closing","down"][e.readyState]:"down"}async function u(){try{n("attempting connection");const e=await fetch(p+"/api/health");if(!e.ok){o("/api/health returned "+e.status),c();return}if(!(await e.json()).ok){o("/api/health response not ok"),c();return}n("health check OK");const d=p.replace(/^http/,"ws")+"/ws/run";t=new WebSocket(d),n("web socket created"),t.onopen=()=>{n("web socket opened"),a=1e3,postMessage({type:"opened",status:r(t)})},t.onmessage=s=>{try{const g=JSON.parse(s.data),y=Object.assign({},g,{status:r(t)});postMessage(y)}catch{o("invalid JSON from server")}},t.onerror=s=>{o("WebSocket error: "+(s&&s.message?s.message:String(s))),c()},t.onclose=s=>{o("WebSocket closed: code "+(s.code||"unknown")+" reason "+(s.reason||"")),c()}}catch(e){o(e.message),c()}}function c(){n(`scheduling retry in ${a}ms`),setTimeout(u,a),a=Math.min(a*2,l)}onmessage=async e=>{const i=e.data;switch(i.type){case"open":n("open"),p=i.baseUrl||"",a=1e3,u();break;case"stdin":if(t&&t.readyState===WebSocket.OPEN){let d=JSON.stringify({type:"stdin",data:i.data});n("sending to server: "+d),t.send(d)}else postMessage({type:"error",error:"not connected",status:r(t)});break;default:postMessage({type:"error",error:"Unknown message type",status:r(t)});break}}})();
